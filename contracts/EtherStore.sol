//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

contract EtherStore {
    uint256 public withdrawLimit;
    mapping(address => uint256) public lastWithdrawTime;
    mapping(address => uint256) public balances;

    constructor() public {
        withdrawLimit = 1 ether;
    }

    function depositFunds() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdrawFunds(uint256 _weiToWithdraw) public {
        require(balances[msg.sender] >= _weiToWithdraw, "Withdraw amount too big");
        require(_weiToWithdraw <= withdrawLimit, "You can't withdraw more than one ether");
        require(block.timestamp >= lastWithdrawTime[msg.sender] + 1 weeks, "One withdraw per week allowed");
        payable(msg.sender).transfer(_weiToWithdraw);
        // msg.sender.send{value: _weiToWithdraw};

        balances[msg.sender] -= _weiToWithdraw;
        lastWithdrawTime[msg.sender] = block.timestamp;
    }
}
